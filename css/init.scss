/*
 * This file is part of the QuidPHP package <https://quidphp.com>
 * Author: Pierre-Philippe Emond <emondpph@gmail.com>
 * License: https://github.com/quidphp/front/blob/master/LICENSE
 */

// include
// stylesheet containing default variables and a set of helpers mixins

// var
// variable par défaut
$font: 'Arial', sans-serif;
$white: #fff;
$black: #000;
$media: $uriMedia;
$defaultResponsiveMaxWidth: 900px;
$defaultSelectedState: '.selected';
$defaultClickState: '[data-triggered="1"]';

// defaultClasses
// mixin qui génère les classes par défaut
@mixin defaultClasses() {
    .clear {
        clear: both;
    }
    .float-left {
        float: left;
    }
    .float-right {
        float: right;
    }
    .align-left {
        text-align: left;
    }
    .align-center {
        text-align: center;
    }
    .align-right {
        text-align: right;
    }
    .table {
        @include wh(100%);
        display: table;
    }
    .table-row {
        display: table-row;
    }
    .table-cell {
        display: table-cell;
        vertical-align: middle;
    }
}

// defaultAnimation
// mixin qui génère certaines animations par défaut
@mixin defaultAnimation() {
    @include keyframes(fadeIn) {
        from {
            opacity: 0;
            visibility: hidden;
        }
        to {
            opacity: 1;
            visibility: visible;
        }
    }

    @include keyframes(fadeOut) {
        from {
            opacity: 1;
            visibility: visible;
        }
        to {
            opacity: 0;
            visibility: hidden;
        }
    }
}

// position
// permet de changer la position d'un élément
@mixin position($top: null, $right: null, $bottom: null, $left: null, $important: null) {
    @if not $top {
        $top: auto;
    }

    @if not $right {
        $right: auto;
    }

    @if not $bottom {
        $bottom: auto;
    }

    @if not $left {
        $left: auto;
    }

    @if ($important) {
        top: $top !important;
        left: $left !important;
        bottom: $bottom !important;
        right: $right !important;
    } @else {
        top: $top;
        left: $left;
        bottom: $bottom;
        right: $right;
    }
}

// abs
// mixin utilisé pour positionner un élément en absolute
@mixin abs($top: null, $right: null, $bottom: null, $left: null, $important: null) {
    @include position($top, $right, $bottom, $left, $important);
    position: absolute;
}

// fixed
// mixin utilisé pour positionner un élément de façon fixed
@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $important: null) {
    @include position($top, $right, $bottom, $left, $important);
    position: fixed;
}

// relative
// mixin utilisé pour positionner un élément de façon relative
@mixin relative($top: null, $right: null, $bottom: null, $left: null, $important: null) {
    @include position($top, $right, $bottom, $left, $important);
    position: relative;
}

// sticky
// mixin pour positionner un élément sticky, fallback absolute pour ie
@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $important: null) {
    @include position($top, $right, $bottom, $left, $important);
    position: -webkit-sticky;
    position: sticky;

    @include ie11() {
        position: relative;
    }
}

// flex
// mixin utilisé pour créer un flexbox row
@mixin flex($justify: null, $align: center, $wrap: null, $inline: null) {
    @if ($inline) {
        display: inline-flex;
    } @else {
        display: flex;
    }

    @if ($justify) {
        justify-content: $justify;
    }

    @if ($align) {
        align-items: $align;
    }

    @if ($wrap) {
        flex-wrap: $wrap;
    }
}

// iflex
// mixin utilisé pour créer un inline-flex dont le contenu est centré verticalement
// et possiblement horizontalement
@mixin iflex($justify: null, $align: center, $wrap: null) {
    @include flex($justify, $align, $wrap, true);
}

// flexCol
// mixin utilisé pour créer un flexbox column
@mixin flexCol($justify: null, $align: null, $wrap: wrap, $inline: null) {
    @if ($inline) {
        display: inline-flex;
    } @else {
        display: flex;
    }
    
    flex-direction: column;

    @if ($align) {
        align-items: $align !important;
    }

    @if ($justify) {
        justify-content: $justify;
    }

    @if ($wrap) {
        flex-wrap: $wrap;
    }
}

// iflexCol
// mixin utilisé pour créer un inline-flex pour du contenu en colonne
@mixin iflexCol($justify: null, $align: center, $wrap: null) {
    @include flexCol($justify, $align, $wrap, true);
}

// wh
// mixin utilisé pour attribuer une width et une height à un élément
// possible d'ajouter une margin left ou top
@mixin wh($width: 100%, $height: true, $marginLeft: null, $marginTop: null) {
    @if ($width) {
        width: $width;
    }

    @if ($height) {
        @if ($height == true) {
            $height: $width;
        }

        height: $height;
    }

    @if ($marginLeft) {
        @if ($marginLeft == true) {
            margin-left: -(round($width/2));
        } @else {
            margin-left: $marginLeft;
        }
    }

    @if ($marginTop) {
        @if ($marginTop == true) {
            margin-top: -(round($height/2));
        } @else {
            margin-top: $marginTop;
        }
    }
}

// inbl
// mixin utilisé pour créer rapidement un élément en display inline-block
@mixin inbl($verticalAlign: middle, $width: null) {
    display: inline-block;

    @if ($verticalAlign) {
        vertical-align: $verticalAlign;
    }

    @if ($width) {
        width: $width;
    }
}

// blmw
// mixin utilisé pour créer un élément en display block avec un maxWidth
@mixin blmw($maxWidth: 100%, $marginAuto: null) {
    display: block;

    @if ($maxWidth) {
        max-width: $maxWidth;
    }

    @if ($marginAuto) {
        margin: auto;
    }
}

// bgimg
// mixin utilisé pour ajouter une image d'arrière-plan
@mixin bgimg($filename, $extension: png, $position: null) {
    background-image: url(#{$media}/#{$filename}.#{$extension});
    background-repeat: no-repeat;

    @if ($position) {
        background-position: $position;
    }
}

// bgimg64
// mixin utilisé pour ajouter une image d'arrière-plan avec du code base64
@mixin bgimg64($value, $position: null) {
    background-image: url($value);
    background-repeat: no-repeat;

    @if ($position) {
        background-position: $position;
    }
}

// cover
// mixin utilisé pour que l'image d'arrière-plan s'adapte à l'espace
@mixin cover($position: center) {
    background-size: cover;
    background-repeat: no-repeat;

    @if ($position) {
        background-position: $position;
    }
}

// animate
// mixin utilisé pour créer des animations compatible avec tous les navigateurs
@mixin animate($name, $time: 1s, $delay: 0s, $direction: normal, $fillMode: forwards, $count: null) {
    -webkit-animation: $name $time $delay $direction $fillMode $count;
    -moz-animation: $name $time $delay $direction $fillMode $count;
    -ms-animation: $name $time $delay $direction $fillMode $count;
    -o-animation: $name $time $delay $direction $fillMode $count;
    animation: $name $time $delay $direction $fillMode $count;
}

// animateCancel
// mixin utilisé pour annuler une animation sur un élément
@mixin animateCancel() {
    -webkit-animation: none;
    -moz-animation: none;
    -ms-animation: none;
    -o-animation: none;
    animation: none;
}

// transition
// mixin utilisé pour ajouter une transition sur un élément
// fournir le nom de la propriété
@mixin transition($prop, $duration: 0.3s, $timing: null) {
    transition: $prop $duration;
    -webkit-transition: $prop $duration $timing;
    -moz-transition: $prop $duration $timing;
    -o-transition: $prop $duration $timing;
    -ms-transition: $prop $duration $timing;
}

// transitionCancel
// mixin utilisé pour annuler une transition sur un élément
@mixin transitionCancel() {
    transition: none;
    -webkit-transition: none;
    -moz-transition: none;
    -o-transition: none;
    -ms-transition: none;
}

// transitions
// mixin utilisé pour créer plusieurs transitions sur un élément
@mixin transitions($props...) {
    -webkit-transition: $props;
    -moz-transition: $props;
    -ms-transition: $props;
    -o-transition: $props;
    transition: $props;
}

// fade in
// mixin pour qu'un élément s'anime avec un fadeIn
@mixin fadeIn($time: 1s, $delay: 0s) {
    @include animate(fadeIn, $time, $delay);
}

// fade out
// mixin pour qu'un élément s'anime avec un fadeOut
@mixin fadeOut($time: 1s, $delay: 0s) {
    @include animate(fadeOut, $time, $delay);
}

// keyframes
// mixin utilisé pour créer une animation complexe
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-ms-keyframes #{$name} {
        @content;
    }

    @-o-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

// ie11
// mixin utilisé pour des styles pour ie11
@mixin ie11() {
    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
        @content;
    }
}

// ieEdge
// mixin utilisé pour des styles pour ieEdge
@mixin ieEdge() {
    @supports (-ms-ime-align: auto) {
        @content;
    }
}

// responsive
// mixin utilisé pour mettre des règles responsives
@mixin responsive($width: $defaultResponsiveMaxWidth, $type: 'max-width') {
    @media screen and (#{$type}: $width), screen and (orientation: portrait) {
        @content;
    }
}

// print
// mixin utilisé pour mettre des règles pour l'impression
@mixin print() {
    @media print {
        @content;
    }
}

// responsiveAndPrint
// mixin pour appliquer les styles à responsive et print
@mixin responsiveAndPrint($maxWidth: $defaultResponsiveMaxWidth) {
    @media print, screen and (max-width: $maxWidth), screen and (orientation: portrait) {
        @content;
    }
}

// inputs
// mixin pour appliquer des styles à tous les inputs de type texte
@mixin inputs() {
    input[type='text'],
    input[type='password'],
    input[type='email'],
    input[type='url'],
    input[type='tel'] {
        @content;
    }
}

// inputPlaceholder
// mixin pour appliquer des styles aux placeholder d'un input
@mixin inputPlaceholder() {
    &::placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

// inputsTextarea
// mixin pour appliquer des styles à tous les inputs de type texte et textarea
@mixin inputsTextarea() {
    input[type='text'],
    input[type='password'],
    input[type='email'],
    input[type='url'],
    input[type='tel'],
    textarea {
        @content;
    }
}

// inputRadioCheckbox
// mixin pour faire un reset des styles pour input radio et checkbox
@mixin inputRadioCheckbox() {
    input[type='radio'],
    input[type='checkbox'] {
        @include wh(1px);
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        background-color: transparent;
        border: 0;
    }
}

// sizeReset
// mixin utilisé pour annuler les styles width, padding et margin
@mixin sizeReset($width: auto, $important: null) {
    @if ($important) {
        width: $width !important;
        padding: 0 !important;
        margin: 0 !important;
    } @else {
        width: $width;
        padding: 0;
        margin: 0;
    }
}

// blockReset
// mixin utilisé pour annuler des styles et que l'élément s'affiche en block avec width auto
@mixin blockReset($width: auto, $important: null) {
    @if ($important) {
        @include sizeReset($width, $important);
        display: block !important;
    } @else {
        @include sizeReset($width, $important);
        display: block;
    }
}

// disableSelection
// désactive la possibilité de sélectionner du contenu
@mixin disableSelection() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

// triangle
// mixin pour faire un triangle
@mixin triangle($side, $color: $black, $dimension: 16px, $transparent: null) {
    @if (not $transparent) {
        $transparent: ($dimension/2);
    }

    @if ($side == 'top') {
        border-top: 0;
        border-left: $transparent solid transparent;
        border-right: $transparent solid transparent;
        border-bottom: $dimension solid $color;
    }

    @if ($side == 'bottom') {
        border-bottom: 0;
        border-left: $transparent solid transparent;
        border-right: $transparent solid transparent;
        border-top: $dimension solid $color;
    }

    @if ($side == 'left') {
        border-left: 0;
        border-top: $transparent solid transparent;
        border-bottom: $transparent solid transparent;
        border-right: $dimension solid $color;
    }

    @if ($side == 'right') {
        border-right: 0;
        border-top: $transparent solid transparent;
        border-bottom: $transparent solid transparent;
        border-left: $dimension solid $color;
    }
}

// triangleEvent
// mixin pour génèrer un triangle de couleur avec état hover et active
@mixin triangleEvent($direction, $dimension, $transparent, $color1, $color2, $color3) {
    @include triangle($direction, $color1, $dimension, $transparent);

    &:hover {
        @include triangle($direction, $color2, $dimension, $transparent);
    }

    &:active {
        @include triangle($direction, $color3, $dimension, $transparent);
    }
}

// hoverAndSelected
// pemet d'ajouter des styles à hover et selected
@mixin hoverAndSelected($selector: $defaultSelectedState) {
    &:hover,
    &#{$selector} {
        @content;
    }
}

// activeAndClick
// pemet d'ajouter des styles à active et le clickState
@mixin activeAndClick($clickState: $defaultClickState) {
    &:active,
    &#{$clickState} {
        @content;
    }
}

// aspectRatio
// permet de générer une division avec aspectRatio, en utilisant un pourcentage à paddingTop
@mixin aspectRatio($width: 16, $height: 9) {
    padding-top: percentage($height / $width);
}
